#!/bin/bash
# FinPlanX Deployment Setup Script

# Colors for output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}FinPlanX Deployment Setup Script${NC}"
echo "======================================"

# Check for dependencies
echo -e "${YELLOW}Checking dependencies...${NC}"
if ! command -v node &> /dev/null
then
    echo -e "${RED}Node.js is not installed. Please install Node.js first.${NC}"
    exit 1
fi

if ! command -v npm &> /dev/null
then
    echo -e "${RED}npm is not installed. Please install npm first.${NC}"
    exit 1
fi

if ! command -v npx &> /dev/null
then
    echo -e "${RED}npx is not installed. Please install npx first.${NC}"
    exit 1
fi

echo -e "${GREEN}All dependencies are installed.${NC}"

# Check for .env file
if [ -f .env ] || [ -f .env.local ] || [ -f .env.production ]; then
    echo -e "${GREEN}Environment file found.${NC}"
else
    echo -e "${YELLOW}No environment file found. Creating .env.local file...${NC}"
    
    # Create .env file
    cat > .env.local << EOL
# Basic NextAuth Configuration
NEXTAUTH_URL=http://localhost:3000
NEXTAUTH_SECRET=$(openssl rand -base64 32)

# Database Configuration - Update this with your own database URL
DATABASE_URL="postgresql://username:password@localhost:5432/finplanx?schema=public"

# Demo Mode (set to 'true' for demo mode, otherwise omit or set to 'false')
NEXT_PUBLIC_DEMO_MODE=true
EOL
    
    echo -e "${GREEN}.env.local file created. Please update it with your own values.${NC}"
fi

# Install dependencies
echo -e "${YELLOW}Installing dependencies...${NC}"
npm install --force

# Generate Prisma client
echo -e "${YELLOW}Generating Prisma client...${NC}"
npx prisma generate

# Check if we should run in demo mode
read -p "Do you want to run in demo mode? (y/n): " demo_mode
if [[ $demo_mode == [Yy]* ]]; then
    echo -e "${YELLOW}Setting up demo mode...${NC}"
    
    # Update .env file to enable demo mode
    if [ -f .env.local ]; then
        # Check if NEXT_PUBLIC_DEMO_MODE is already in the file
        if grep -q "NEXT_PUBLIC_DEMO_MODE" .env.local; then
            # Update existing value
            sed -i 's/NEXT_PUBLIC_DEMO_MODE=.*/NEXT_PUBLIC_DEMO_MODE=true/' .env.local
        else
            # Add new entry
            echo "NEXT_PUBLIC_DEMO_MODE=true" >> .env.local
        fi
    elif [ -f .env ]; then
        if grep -q "NEXT_PUBLIC_DEMO_MODE" .env; then
            sed -i 's/NEXT_PUBLIC_DEMO_MODE=.*/NEXT_PUBLIC_DEMO_MODE=true/' .env
        else
            echo "NEXT_PUBLIC_DEMO_MODE=true" >> .env
        fi
    fi
    
    echo -e "${GREEN}Demo mode enabled.${NC}"
else
    echo -e "${YELLOW}Setting up production mode...${NC}"
    
    # Update .env file to disable demo mode
    if [ -f .env.local ]; then
        if grep -q "NEXT_PUBLIC_DEMO_MODE" .env.local; then
            sed -i 's/NEXT_PUBLIC_DEMO_MODE=.*/NEXT_PUBLIC_DEMO_MODE=false/' .env.local
        else
            echo "NEXT_PUBLIC_DEMO_MODE=false" >> .env.local
        fi
    elif [ -f .env ]; then
        if grep -q "NEXT_PUBLIC_DEMO_MODE" .env; then
            sed -i 's/NEXT_PUBLIC_DEMO_MODE=.*/NEXT_PUBLIC_DEMO_MODE=false/' .env
        else
            echo "NEXT_PUBLIC_DEMO_MODE=false" >> .env
        fi
    fi
    
    # Ask if we should initialize the database
    read -p "Do you want to initialize the database? (y/n): " init_db
    if [[ $init_db == [Yy]* ]]; then
        echo -e "${YELLOW}Initializing database...${NC}"
        node scripts/init-db.js
    fi
    
    echo -e "${GREEN}Production mode enabled.${NC}"
fi

# Build the application
echo -e "${YELLOW}Building the application...${NC}"
npm run build

echo -e "${GREEN}Setup completed successfully!${NC}"
echo -e "${YELLOW}You can now start the application with:${NC}"
echo -e "${BLUE}npm run start${NC}"