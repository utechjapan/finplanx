// prisma/schema.prisma 

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String         @id @default(cuid())
  name          String
  email         String         @unique
  password      String
  accounts      Account[]
  budgets       Budget[]
  expenses      Expense[]
  incomes       Income[]
  goals         Goal[]
  lifeEvents    LifeEvent[]
  debts         Debt[]
  investments   Investment[]
  notifications Notification[] // <-- Added notifications relation
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  emailVerified  DateTime?
  verificationToken String?
}

model Account {
  id        String   @id @default(cuid())
  name      String
  type      String   // checking, savings, credit, investment
  balance   Float
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Budget {
  id        String   @id @default(cuid())
  month     Int
  year      Int
  amount    Float
  category  String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, month, year, category])
}

model Expense {
  id          String   @id @default(cuid())
  amount      Float
  category    String
  description String?
  date        DateTime
  isRecurring Boolean  @default(false)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Income {
  id          String   @id @default(cuid())
  amount      Float
  source      String
  description String?
  date        DateTime
  isRecurring Boolean  @default(false)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Goal {
  id            String   @id @default(cuid())
  name          String
  targetAmount  Float
  currentAmount Float    @default(0)
  startDate     DateTime
  targetDate    DateTime
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model LifeEvent {
  id          String   @id @default(cuid())
  name        String
  date        DateTime
  impact      Float    // financial impact
  description String?
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Debt {
  id              String        @id @default(cuid())
  name            String
  totalAmount     Float
  remainingAmount Float
  interestRate    Float
  minimumPayment  Float
  startDate       DateTime
  endDate         DateTime?
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  payments        DebtPayment[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model DebtPayment {
  id        String   @id @default(cuid())
  amount    Float
  date      DateTime
  debt      Debt     @relation(fields: [debtId], references: [id], onDelete: Cascade)
  debtId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Investment {
  id           String                     @id @default(cuid())
  name         String
  type         String                     // stock, bond, real estate, etc.
  amount       Float
  returnRate   Float
  startDate    DateTime
  endDate      DateTime?
  user         User                       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  transactions InvestmentTransaction[]
  createdAt    DateTime                   @default(now())
  updatedAt    DateTime                   @updatedAt
}

model InvestmentTransaction {
  id           String       @id @default(cuid())
  amount       Float
  type         String       // buy, sell, dividend
  date         DateTime
  investment Investment   @relation(fields: [investmentId], references: [id], onDelete: Cascade)
  investmentId String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

// Added Notification model
model Notification {
  id         String   @id @default(cuid())
  userId     String
  title      String
  message    String
  type       String   // "expense_reminder", "system", etc.
  targetDate DateTime?
  isRead     Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
