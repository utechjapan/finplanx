// File: prisma/schema.prisma
// Updates to Prisma schema to add notification functionality

model User {
  id                String          @id @default(cuid())
  name              String?
  email             String?         @unique
  emailVerified     DateTime?
  image             String?
  password          String?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  verificationToken String?
  accounts          Account[]
  sessions          Session[]
  notifications     Notification[]
  expenses          Expense[]
  incomes           Income[]
  transactions      Transaction[]
  debts             Debt[]
  investments       Investment[]
  budgets           Budget[]
  goals             Goal[]
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model PasswordReset {
  id        String   @id @default(cuid())
  userId    String   @unique
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Notification {
  id         String    @id @default(cuid())
  userId     String
  title      String
  message    String    @db.Text
  type       String
  targetDate DateTime?
  isRead     Boolean   @default(false)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  priority   String?   @default("medium")
  data       Json?     @default("{}")
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Expense {
  id          String    @id @default(cuid())
  userId      String
  name        String
  amount      Float
  date        DateTime
  category    String
  recurring   Boolean   @default(false)
  frequency   String?
  nextDate    DateTime?
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Income {
  id          String    @id @default(cuid())
  userId      String
  name        String
  amount      Float
  date        DateTime
  category    String
  recurring   Boolean   @default(false)
  frequency   String?
  nextDate    DateTime?
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Transaction {
  id          String   @id @default(cuid())
  userId      String
  name        String
  amount      Float
  date        DateTime
  category    String
  type        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Debt {
  id           String   @id @default(cuid())
  userId       String
  name         String
  totalAmount  Float
  remainingAmount Float
  interestRate Float
  startDate    DateTime
  endDate      DateTime?
  minimumPayment Float
  category     String
  description  String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Investment {
  id          String   @id @default(cuid())
  userId      String
  name        String
  amount      Float
  currentValue Float
  type        String
  startDate   DateTime
  endDate     DateTime?
  returnRate  Float?
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Budget {
  id          String   @id @default(cuid())
  userId      String
  name        String
  amount      Float
  category    String
  startDate   DateTime
  endDate     DateTime?
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Goal {
  id          String   @id @default(cuid())
  userId      String
  name        String
  targetAmount Float
  currentAmount Float
  category    String
  startDate   DateTime
  targetDate  DateTime
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}